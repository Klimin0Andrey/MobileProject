import 'package:flutter/material.dart';
import 'package:linux_test2/data/models/restaurant.dart';
import 'package:linux_test2/services/restaurant_service.dart';
import 'package:linux_test2/data/models/dish.dart';

class RestaurantProvider with ChangeNotifier {
  final RestaurantService _restaurantService = RestaurantService();

  List<Restaurant> _restaurants = [];
  List<Restaurant> _filteredRestaurants = [];
  String _selectedCuisine = '–í—Å–µ';

  List<Restaurant> get restaurants => _filteredRestaurants;

  List<Restaurant> get allRestaurants => _restaurants;

  String get selectedCuisine => _selectedCuisine;

  RestaurantProvider() {
    print('üîÑ RestaurantProvider —Å–æ–∑–¥–∞–Ω');
    _loadRestaurants();
  }

  void _loadRestaurants() {
    print('üî• –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ Firestore...');

    _restaurantService.getRestaurants().listen((restaurants) {
      print('‚úÖ –£–°–ü–ï–•: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${restaurants.length} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤');
      for (var restaurant in restaurants) {
        print('   - ${restaurant.name}');
      }
      _restaurants = restaurants;
      _filteredRestaurants = restaurants;
      notifyListeners();
    }, onError: (error) {
      print('‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏: $error');
    });
  }

  void filterByCuisine(String cuisine) {
    _selectedCuisine = cuisine;

    if (cuisine == '–í—Å–µ') {
      _filteredRestaurants = _restaurants;
    } else {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Stream
      _filteredRestaurants = _restaurants.where((restaurant) =>
          restaurant.cuisineType.contains(cuisine)
      ).toList();
    }
    notifyListeners();
  }

  void searchRestaurants(String query) {
    if (query.isEmpty) {
      _filteredRestaurants = _restaurants;
    } else {
      _filteredRestaurants = _restaurants
          .where(
            (restaurant) =>
                restaurant.name.toLowerCase().contains(query.toLowerCase()) ||
                restaurant.cuisineType.any(
                  (cuisine) =>
                      cuisine.toLowerCase().contains(query.toLowerCase()),
                ),
          )
          .toList();
    }
    notifyListeners();
  }

  // –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–õ–Æ–î –†–ï–°–¢–û–†–ê–ù–ê
  Stream<List<Dish>> getRestaurantDishes(String restaurantId) {
    return _restaurantService.getRestaurantDishes(restaurantId);
  }
}
